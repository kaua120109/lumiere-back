// eventos.js
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'], // Adiciona logs para debug
  errorFormat: 'pretty'
});

// Fechar conex√£o ao terminar o processo
process.on('beforeExit', async () => {
  await prisma.$disconnect();
});

// Fun√ß√£o para converter BigInt em string para JSON
const serializeBigInt = (obj) => {
  return JSON.parse(JSON.stringify(obj, (key, value) =>
    typeof value === 'bigint' ? value.toString() : value
  ));
};

// Teste de conex√£o com o banco
const testConnection = async () => {
  try {
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco estabelecida com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco:', error);
    throw error;
  }
};

export const eventos = {
  async testarConexao() {
    return await testConnection();
  },

  async listarEventos() {
    try {
      console.log('üîç Buscando eventos...');

      const eventosEncontrados = await prisma.evento.findMany({
        orderBy: { data: 'asc' },
        select: {
          eventoid: true,
          nome: true,
          data: true,
          local: true,
          descricao: true,
          imagem: true,    // Adicionei imagem, categoria e km de volta, pois parecem √∫teis
          categoria: true,
          km: true,
          // REMOVIDOS os campos que n√£o existiam no schema.prisma:
          // capacidadeMaxima: true,
          // ingressosDisponiveis: true,
          // preco: true,
        }
      });

      console.log(`‚úÖ Encontrados ${eventosEncontrados.length} eventos.`);
      return serializeBigInt(eventosEncontrados);

    } catch (error) {
      console.error('‚ùå Erro ao buscar eventos:', error);
      throw new Error(`Erro ao listar eventos: ${error.message}`);
    }
  },

  async buscarEventoPorId(eventId) {
    try {
      console.log(`üîç Buscando evento ID: ${eventId}`);

      const id = typeof eventId === 'string' ? BigInt(eventId) : eventId;

      const eventoEncontrado = await prisma.evento.findUnique({
        where: { eventoid: id },
        select: {
          eventoid: true,
          nome: true,
          data: true,
          local: true,
          descricao: true,
          imagem: true,    // Adicionei imagem, categoria e km de volta
          categoria: true,
          km: true,
          // REMOVIDOS os campos que n√£o existiam no schema.prisma:
          // capacidadeMaxima: true,
          // ingressosDisponiveis: true,
          // preco: true,
        }
      });

      if (!eventoEncontrado) {
        console.log(`üîç Evento ID: ${eventId} n√£o encontrado.`);
        return null;
      }

      console.log(`‚úÖ Evento encontrado: ${eventoEncontrado.nome}`);
      return serializeBigInt(eventoEncontrado);

    } catch (error) {
      console.error(`‚ùå Erro ao buscar evento ID ${eventId}:`, error);
      throw new Error(`Erro ao buscar evento por ID: ${error.message}`);
    }
  },

  async criarEvento(dadosEvento) {
    try {
      console.log('‚ú® Tentando criar novo evento...');

      let dataEvento = new Date(dadosEvento.data);
      if (isNaN(dataEvento.getTime())) {
        throw new Error('Data do evento inv√°lida. Formato esperado: AAAA-MM-DD ou formato de data ISO.');
      }

      // Garante que o pre√ßo seja um n√∫mero de ponto flutuante, se aplic√°vel
      // Este tratamento foi mantido, mas se 'preco' n√£o for adicionado ao schema,
      // ele n√£o ser√° salvo no DB.
      if (dadosEvento.preco !== undefined) {
        dadosEvento.preco = parseFloat(dadosEvento.preco);
      }

      const novoEvento = await prisma.evento.create({
        data: {
          nome: dadosEvento.nome,
          data: dataEvento,
          local: dadosEvento.local,
          descricao: dadosEvento.descricao || null,
          imagem: dadosEvento.imagem || null,     // Adicionei tratamento para imagem
          categoria: dadosEvento.categoria || null, // Adicionei tratamento para categoria
          km: dadosEvento.km || null,             // Adicionei tratamento para km
          // Note: capacidadeMaxima, ingressosDisponiveis e preco n√£o est√£o aqui,
          // a menos que voc√™ os tenha adicionado ao schema.prisma
          // capacidadeMaxima: dadosEvento.capacidadeMaxima || 0,
          // ingressosDisponiveis: dadosEvento.ingressosDisponiveis || 0,
          // preco: dadosEvento.preco || 0.0,
        }
      });

      console.log(`‚úÖ Evento criado com sucesso: ${novoEvento.nome}`);
      return serializeBigInt(novoEvento);

    } catch (error) {
      console.error('‚ùå Erro ao criar evento:', error);
      if (error.code === 'P2002') {
        throw new Error(`Erro ao criar evento: J√° existe um evento com o mesmo ${error.meta.target.join(', ')}.`);
      }
      throw new Error(`Erro ao criar evento: ${error.message}`);
    }
  },

  async atualizarEvento(eventId, dadosAtualizacao) {
    try {
      console.log(`üìù Atualizando evento ID: ${eventId}`);

      const id = typeof eventId === 'string' ? BigInt(eventId) : eventId;

      // Valida√ß√£o e convers√£o da data se presente
      if (dadosAtualizacao.data) {
        const dataEvento = new Date(dadosAtualizacao.data);
        if (isNaN(dataEvento.getTime())) {
          throw new Error('Data inv√°lida fornecida para atualiza√ß√£o');
        }
        dadosAtualizacao.data = dataEvento;
      }

      // Garante que o pre√ßo seja um n√∫mero de ponto flutuante, se aplic√°vel
      if (dadosAtualizacao.preco !== undefined) {
        dadosAtualizacao.preco = parseFloat(dadosAtualizacao.preco);
      }

      const eventoAtualizado = await prisma.evento.update({
        where: { eventoid: id },
        data: dadosAtualizacao // Prisma √© inteligente o suficiente para aplicar apenas os campos existentes
      });

      console.log(`‚úÖ Evento atualizado: ${eventoAtualizado.nome}`);
      return serializeBigInt(eventoAtualizado);

    } catch (error) {
      console.error(`‚ùå Erro ao atualizar evento ${eventId}:`, error);

      if (error.code === 'P2025') {
        console.log(`‚ùå Evento n√£o encontrado para ID: ${eventId}`);
        return null;
      }

      if (error.code === 'P2002') {
        throw new Error(`Erro ao atualizar evento: J√° existe outro evento com o(s) mesmo(s) ${error.meta.target.join(', ')}.`);
      }

      throw new Error(`Erro ao atualizar evento: ${error.message}`);
    }
  },

  async deletarEvento(eventId) {
    try {
      console.log(`üóëÔ∏è Deletando evento ID: ${eventId}`);

      const id = typeof eventId === 'string' ? BigInt(eventId) : eventId;

      const eventoDeletado = await prisma.evento.delete({
        where: { eventoid: id }
      });

      console.log(`‚úÖ Evento deletado: ${eventoDeletado.nome}`);
      return serializeBigInt(eventoDeletado);

    } catch (error) {
      console.error(`‚ùå Erro ao deletar evento ID ${eventId}:`, error);

      if (error.code === 'P2025') {
        console.log(`‚ùå Evento n√£o encontrado para ID: ${eventId}`);
        return null;
      }

      throw new Error(`Erro ao deletar evento: ${error.message}`);
    }
  }
};