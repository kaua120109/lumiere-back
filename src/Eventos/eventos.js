// backend/src/Eventos/eventos.js
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Fun√ß√£o auxiliar para serializar BigInt para JSON
// Necess√°rio porque BigInt n√£o √© nativamente suportado por JSON.stringify
function serializeBigInt(obj) {
  return JSON.parse(JSON.stringify(obj, (key, value) =>
    typeof value === 'bigint'
      ? value.toString()
      : value // Retorna a data no formato ISO para consist√™ncia
  ));
}

export const eventos = {
  // Testar conex√£o com o banco de dados
  async testarConexao() {
    try {
      await prisma.$connect();
      console.log('‚ú® Conex√£o com o banco de dados estabelecida com sucesso!');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao conectar ao banco de dados:', error);
      return false;
    } finally {
      await prisma.$disconnect();
    }
  },

  // Listar todos os eventos
  async listarEventos() {
    try {
      console.log('üîç Buscando eventos...');
      const todosEventos = await prisma.evento.findMany();
      console.log(`‚úÖ ${todosEventos.length} eventos encontrados.`);
      return serializeBigInt(todosEventos);
    } catch (error) {
      console.error('‚ùå Erro ao listar eventos:', error);
      throw new Error('Erro ao buscar eventos.');
    }
  },

  // Buscar evento por ID
  async buscarEventoPorId(id) {
    try {
      const eventoid = typeof id === 'string' ? BigInt(id) : id;
      console.log(`üîç Buscando evento ID: ${eventoid}...`);
      const evento = await prisma.evento.findUnique({
        where: { eventoid },
      });
      if (!evento) {
        console.log(`‚ùï Evento ID: ${eventoid} n√£o encontrado.`);
        return null;
      }
      console.log(`‚úÖ Evento ID: ${eventoid} encontrado: ${evento.nome}`);
      return serializeBigInt(evento);
    } catch (error) {
      console.error(`‚ùå Erro ao buscar evento ID ${id}:`, error);
      throw new Error('Erro ao buscar evento por ID.');
    }
  },

  // Criar um novo evento
  async criarEvento(dadosEvento) {
    try {
      console.log('‚ú® Tentando criar novo evento...');

      // Preparar dados para cria√ß√£o, tratando strings vazias para null e convertendo tipos
      const dadosParaCriar = {
        nome: dadosEvento.nome,
        descricao: dadosEvento.descricao === '' ? null : dadosEvento.descricao,
        local: dadosEvento.local,
        imagem: dadosEvento.imagem === '' ? null : dadosEvento.imagem,
        categoria: dadosEvento.categoria === '' ? null : dadosEvento.categoria,
      };

      // Valida√ß√£o e convers√£o da data
      if (dadosEvento.data) {
        const dataEvento = new Date(dadosEvento.data);
        if (isNaN(dataEvento.getTime())) {
          throw new Error('Data do evento inv√°lida. Formato esperado: AAAA-MM-DDTHH:MM ou formato de data ISO.');
        }
        dadosParaCriar.data = dataEvento;
      } else {
        throw new Error('Data do evento √© obrigat√≥ria.'); // Data √© obrigat√≥ria no seu schema
      }

      // Convers√£o de n√∫meros com valida√ß√£o
      if (dadosEvento.km !== undefined && dadosEvento.km !== null && dadosEvento.km !== '') {
        const kmValue = parseFloat(dadosEvento.km);
        if (isNaN(kmValue) || kmValue < 0) {
          throw new Error('Dist√¢ncia em Km deve ser um n√∫mero positivo.');
        }
        dadosParaCriar.km = kmValue;
      } else {
        dadosParaCriar.km = null;
      }

      if (dadosEvento.capacidadeMaxima !== undefined && dadosEvento.capacidadeMaxima !== null && dadosEvento.capacidadeMaxima !== '') {
        const capacidadeValue = parseInt(dadosEvento.capacidadeMaxima, 10);
        if (isNaN(capacidadeValue) || capacidadeValue < 0) {
          throw new Error('Capacidade M√°xima deve ser um n√∫mero inteiro positivo.');
        }
        dadosParaCriar.capacidadeMaxima = capacidadeValue;
      } else {
        dadosParaCriar.capacidadeMaxima = null;
      }

      if (dadosEvento.ingressosDisponiveis !== undefined && dadosEvento.ingressosDisponiveis !== null && dadosEvento.ingressosDisponiveis !== '') {
        const ingressosValue = parseInt(dadosEvento.ingressosDisponiveis, 10);
        if (isNaN(ingressosValue) || ingressosValue < 0) {
          throw new Error('Ingressos Dispon√≠veis deve ser um n√∫mero inteiro positivo.');
        }
        dadosParaCriar.ingressosDisponiveis = ingressosValue;
      } else {
        dadosParaCriar.ingressosDisponiveis = null;
      }

      if (dadosEvento.preco !== undefined && dadosEvento.preco !== null && dadosEvento.preco !== '') {
        const precoValue = parseFloat(dadosEvento.preco);
        if (isNaN(precoValue) || precoValue < 0) {
          throw new Error('Pre√ßo deve ser um n√∫mero positivo.');
        }
        dadosParaCriar.preco = precoValue;
      } else {
        dadosParaCriar.preco = null;
      }

      console.log('Dados finais para cria√ß√£o no Prisma:', dadosParaCriar);

      const novoEvento = await prisma.evento.create({
        data: dadosParaCriar,
      });
      console.log(`‚úÖ Evento criado: ${novoEvento.nome}`);
      return serializeBigInt(novoEvento);
    } catch (error) {
      console.error('‚ùå Erro ao criar evento:', error.message);
      // Erro P2000: The provided value for the column is too long for the column's type.
      if (error.code === 'P2000') {
        throw new Error(`O valor fornecido √© muito longo para uma das colunas. Verifique o tamanho de 'imagem' ou 'descri√ß√£o'. Erro: ${error.meta?.column_name || 'coluna n√£o especificada'}`);
      }
      // Erro P2002: Unique constraint failed on the {constraint}
      if (error.code === 'P2002') {
        throw new Error(`J√° existe um evento com o(s) dado(s) ${error.meta.target.join(', ')} fornecido(s).`);
      }
      throw new Error(`Erro ao criar evento: ${error.message}`);
    }
  },

  // Atualizar um evento existente
  async atualizarEvento(eventId, dadosAtualizacao) {
    try {
      console.log(`üìù Tentando atualizar evento ID: ${eventId} com dados recebidos:`, dadosAtualizacao);
      const id = typeof eventId === 'string' ? BigInt(eventId) : eventId;

      const dataToUpdate = {};

      // TRATAMENTO DA DATA: Garante que a data √© um objeto Date v√°lido se for fornecida
      // Permite que 'data' seja atualizada para null se for explicitamente enviada como '' ou null
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'data')) {
        if (dadosAtualizacao.data === '' || dadosAtualizacao.data === null) {
          dataToUpdate.data = null; // Se permitido pelo schema.prisma
        } else {
          const dataEvento = new Date(dadosAtualizacao.data);
          if (isNaN(dataEvento.getTime())) {
            throw new Error('Data do evento inv√°lida. Formato esperado: AAAA-MM-DDTHH:MM ou formato de data ISO.');
          }
          dataToUpdate.data = dataEvento;
        }
      }

      // TRATAMENTO DOS CAMPOS GERAIS (String)
      // Usamos Object.prototype.hasOwnProperty.call para verificar se a propriedade existe
      // e tratamos strings vazias como null para campos opcionais no DB.
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'nome')) {
        dataToUpdate.nome = dadosAtualizacao.nome;
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'descricao')) {
        dataToUpdate.descricao = dadosAtualizacao.descricao === '' ? null : dadosAtualizacao.descricao;
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'local')) {
        dataToUpdate.local = dadosAtualizacao.local;
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'imagem')) {
        dataToUpdate.imagem = dadosAtualizacao.imagem === '' ? null : dadosAtualizacao.imagem;
      }
      // TRATAMENTO ESPEC√çFICO DA CATEGORIA
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'categoria')) {
        dataToUpdate.categoria = (dadosAtualizacao.categoria === '' || dadosAtualizacao.categoria === null)
          ? null
          : String(dadosAtualizacao.categoria); // Garante que seja uma string
      }

      // TRATAMENTO DOS CAMPOS NUM√âRICOS (Float/Int)
      // Convertemos para null se for string vazia ou null, caso contr√°rio parseamos.
      // E validamos se o resultado da parseamento √© um n√∫mero v√°lido.
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'km')) {
        dataToUpdate.km = (dadosAtualizacao.km === '' || dadosAtualizacao.km === null) ? null : parseFloat(dadosAtualizacao.km);
        if (isNaN(dataToUpdate.km) && dataToUpdate.km !== null) {
          throw new Error('Dist√¢ncia em Km deve ser um n√∫mero v√°lido.');
        }
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'capacidadeMaxima')) {
        dataToUpdate.capacidadeMaxima = (dadosAtualizacao.capacidadeMaxima === '' || dadosAtualizacao.capacidadeMaxima === null) ? null : parseInt(dadosAtualizacao.capacidadeMaxima, 10);
        if (isNaN(dataToUpdate.capacidadeMaxima) && dataToUpdate.capacidadeMaxima !== null) {
          throw new Error('Capacidade M√°xima deve ser um n√∫mero inteiro v√°lido.');
        }
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'ingressosDisponiveis')) {
        dataToUpdate.ingressosDisponiveis = (dadosAtualizacao.ingressosDisponiveis === '' || dadosAtualizacao.ingressosDisponiveis === null) ? null : parseInt(dadosAtualizacao.ingressosDisponiveis, 10);
        if (isNaN(dataToUpdate.ingressosDisponiveis) && dataToUpdate.ingressosDisponiveis !== null) {
          throw new Error('Ingressos Dispon√≠veis deve ser um n√∫mero inteiro v√°lido.');
        }
      }
      if (Object.prototype.hasOwnProperty.call(dadosAtualizacao, 'preco')) {
        dataToUpdate.preco = (dadosAtualizacao.preco === '' || dadosAtualizacao.preco === null) ? null : parseFloat(dadosAtualizacao.preco);
        if (isNaN(dataToUpdate.preco) && dataToUpdate.preco !== null) {
          throw new Error('Pre√ßo deve ser um n√∫mero v√°lido.');
        }
      }

      console.log('Dados finais a serem atualizados no Prisma:', dataToUpdate);

      const eventoAtualizado = await prisma.evento.update({
        where: { eventoid: id },
        data: dataToUpdate
      });

      console.log(`‚úÖ Evento atualizado com sucesso: ${eventoAtualizado.nome}`);
      return serializeBigInt(eventoAtualizado);

    } catch (error) {
      console.error(`‚ùå Erro ao atualizar evento ID ${eventId}:`, error.message);
      // Erros espec√≠ficos do Prisma
      if (error.code === 'P2025') {
        throw new Error(`Evento com ID ${eventId} n√£o encontrado para atualiza√ß√£o.`);
      }
      if (error.code === 'P2002') {
        throw new Error(`Erro ao atualizar evento: J√° existe outro evento com o(s) mesmo(s) ${error.meta.target.join(', ')}.`);
      }
      // Re-lan√ßa o erro original ou uma mensagem mais gen√©rica
      throw new Error(`Erro ao atualizar evento: ${error.message}`);
    }
  },

  // Deletar um evento
  async deletarEvento(id) {
    try {
      const eventoid = typeof id === 'string' ? BigInt(id) : id;
      console.log(`üî• Tentando deletar evento ID: ${eventoid}...`);
      const eventoDeletado = await prisma.evento.delete({
        where: { eventoid },
      });
      console.log(`‚úÖ Evento ID: ${eventoid} deletado com sucesso: ${eventoDeletado.nome}`);
      return serializeBigInt(eventoDeletado);
    } catch (error) {
      console.error(`‚ùå Erro ao deletar evento ID ${id}:`, error.message);
      if (error.code === 'P2025') {
        throw new Error(`Evento com ID ${id} n√£o encontrado para dele√ß√£o.`);
      }
      throw new Error(`Erro ao deletar evento: ${error.message}`);
    }
  },
};