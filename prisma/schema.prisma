generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  usuarioid        Int               @id @default(autoincrement())
  usuario          String
  nome             String
  cpf              String
  email            String?
  celular          String?
  senha            String
  endereco         endereco[]
  ordens           ordem[]
  historias        historia[]
  comentarios      comentario[]
  membro           membro?
  pagamentos       pagamento[]
  ofertaUsuarios   ofertaUsuario[]
  conteudoUsuarios conteudoUsuario[]
  eventoUsuarios   eventoUsuario[]
  createdAt        DateTime          @default(now())
  admin            Boolean           @default(false)
  googleId         String?           @unique
}

model endereco {
  enderecoid  BigInt   @id @default(autoincrement())
  usuarioid   Int
  usuario     usuario  @relation(fields: [usuarioid], references: [usuarioid])
  cidade      String
  bairro      String
  rua         String
  numero      String
  complemento String
  estado      String
  cep         String
  createdAt   DateTime @default(now())
  ordem       ordem[]
}

model categoria {
  categoriaid BigInt    @id @default(autoincrement())
  nome        String
  produtos    produto[]
  imagem      String?   @db.Text
}

model produto {
  produtoid           BigInt         @id @default(autoincrement())
  nome                String
  descricao           String
  preco               Float
  precoOriginal       Float? // Preço original antes da oferta
  porcentagemDesconto Int? // Porcentagem de desconto (ex: 30 para 30%)
  emOferta            Boolean        @default(false)
  dataInicioOferta    DateTime? // Data de início da oferta
  dataFimOferta       DateTime? // Data de fim da oferta
  estoque             Int
  categoriaid         BigInt
  categoria           categoria      @relation(fields: [categoriaid], references: [categoriaid])
  imagem              String?        @db.Text
  imagensAdicionais   String[] // Array de imagens adicionais
  cores               String[] // Array de cores disponíveis
  tamanhos            String[] // Array de tamanhos disponíveis
  createdAt           DateTime       @default(now())
  ordemProduto        ordemProduto[]
}

model ordem {
  ordemid    BigInt         @id @default(autoincrement())
  usuarioid  Int
  usuario    usuario        @relation(fields: [usuarioid], references: [usuarioid])
  enderecoid BigInt
  endereco   endereco       @relation(fields: [enderecoid], references: [enderecoid])
  totalPreco Decimal        @db.Decimal(10, 2)
  desconto   Decimal        @db.Decimal(10, 2)
  frete      Decimal        @db.Decimal(10, 2)
  precoFinal Decimal        @db.Decimal(10, 2)
  status     String
  createdAt  DateTime       @default(now())
  updateAt   DateTime       @default(now()) @updatedAt
  produtos   ordemProduto[]
  pagamento  pagamento?
}

model ordemProduto {
  id            BigInt   @id @default(autoincrement())
  ordemid       BigInt
  ordem         ordem    @relation(fields: [ordemid], references: [ordemid])
  produtoid     BigInt
  produto       produto  @relation(fields: [produtoid], references: [produtoid])
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  subtotal      Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
}

model pagamento {
  pagamentoid    BigInt   @id @default(autoincrement())
  ordemid        BigInt   @unique
  ordem          ordem    @relation(fields: [ordemid], references: [ordemid])
  valor          Decimal  @db.Decimal(10, 2)
  status         Int
  data           DateTime @default(now())
  usuarioid      Int
  usuario        usuario  @relation(fields: [usuarioid], references: [usuarioid])
  transacao      String
  formaPagamento String
  cartao         String?
  parcelas       Int
  createdAt      DateTime @default(now())
}

model historia {
  historiaid  BigInt       @id @default(autoincrement())
  titulo      String
  conteudo    String       @db.Text
  imagem      String?      @db.Text
  usuarioid   Int
  usuario     usuario      @relation(fields: [usuarioid], references: [usuarioid])
  categoria   String?
  esporte     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  comentarios comentario[]
}

model comentario {
  comentarioid BigInt   @id @default(autoincrement()) @map("comentarioid")
  conteudo     String   @db.Text
  usuarioid    Int      @map("usuarioid")
  usuario      usuario  @relation(fields: [usuarioid], references: [usuarioid])
  historiaid   BigInt   @map("historiaid")
  historia     historia @relation(fields: [historiaid], references: [historiaid])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model membro {
  membroid      BigInt    @id @default(autoincrement())
  usuarioid     Int       @unique
  nome          String
  usuario       usuario   @relation(fields: [usuarioid], references: [usuarioid])
  dataInicio    DateTime  @default(now())
  dataExpiracao DateTime?
  ativo         Boolean   @default(true)
  beneficios    String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model promocao {
  promocaoid BigInt   @id @default(autoincrement())
  codigo     String   @unique
  descricao  String
  desconto   Decimal  @db.Decimal(10, 2)
  ativo      Boolean  @default(true)
  validade   DateTime
  createdAt  DateTime @default(now())
}

model oferta {
  ofertaid  BigInt          @id @default(autoincrement())
  titulo    String
  descricao String          @db.Text
  imagem    String?         @db.Text
  ativo     Boolean         @default(true)
  createdAt DateTime        @default(now())
  usuarios  ofertaUsuario[]
}

model conteudo {
  conteudoid BigInt            @id @default(autoincrement())
  titulo     String
  tipo       String // vídeo, treino, dica...
  descricao  String            @db.Text
  url        String
  imagem     String?           @db.Text
  createdAt  DateTime          @default(now())
  usuarios   conteudoUsuario[]
}

model evento {
  eventoid  BigInt          @id @default(autoincrement())
  titulo    String
  descricao String          @db.Text
  data      DateTime
  local     String
  imagem    String?         @db.Text
  criadoEm  DateTime        @default(now())
  usuarios  eventoUsuario[]
}

model recompensa {
  recompensaid BigInt   @id @default(autoincrement())
  titulo       String
  descricao    String   @db.Text
  imagem       String?  @db.Text
  pontos       Int
  ativo        Boolean  @default(true)
  criadoEm     DateTime @default(now())
}

model ofertaUsuario {
  id          BigInt   @id @default(autoincrement())
  usuarioid   Int
  usuario     usuario  @relation(fields: [usuarioid], references: [usuarioid])
  ofertaid    BigInt
  oferta      oferta   @relation(fields: [ofertaid], references: [ofertaid])
  visualizado Boolean  @default(false)
  data        DateTime @default(now())

  @@unique([usuarioid, ofertaid])
}

model conteudoUsuario {
  id         BigInt   @id @default(autoincrement())
  usuarioid  Int
  usuario    usuario  @relation(fields: [usuarioid], references: [usuarioid])
  conteudoid BigInt
  conteudo   conteudo @relation(fields: [conteudoid], references: [conteudoid])
  acessadoEm DateTime @default(now())

  @@unique([usuarioid, conteudoid])
}

model eventoUsuario {
  id        BigInt   @id @default(autoincrement())
  usuarioid Int
  usuario   usuario  @relation(fields: [usuarioid], references: [usuarioid])
  eventoid  BigInt
  evento    evento   @relation(fields: [eventoid], references: [eventoid])
  inscrito  Boolean  @default(true)
  data      DateTime @default(now())

  @@unique([usuarioid, eventoid])
}
