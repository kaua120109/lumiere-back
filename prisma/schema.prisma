generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuario {
  usuarioid   Int          @id @default(autoincrement())
  usuario     String
  nome        String
  cpf         String
  email       String?
  celular     String?
  senha       String
  endereco    endereco[] // 1:N
  ordens      ordem[] // 1:N
  historias   historia[] // 1:N
  comentarios comentario[] // 1:N
  membro      membro? // 1:1
  pagamentos  pagamento[] // 1:N
  createdAt   DateTime     @default(now())
  admin       Boolean      @default(false)
  googleId    String?      @unique // Novo campo para ID do Google
}

model endereco {
  enderecoid  BigInt   @id @default(autoincrement())
  usuarioid   Int
  usuario     usuario  @relation(fields: [usuarioid], references: [usuarioid])
  cidade      String
  bairro      String
  rua         String
  numero      String
  complemento String
  estado      String
  cep         String
  createdAt   DateTime @default(now())
  ordem       ordem[]
}

model categoria {
  categoriaid BigInt    @id @default(autoincrement())
  nome        String
  produtos    produto[]
  imagem      String?   @db.Text // Adicionado @db.Text para suportar strings base64 longas
}

model produto {
  produtoid    BigInt         @id @default(autoincrement())
  nome         String
  descricao    String
  preco        Float
  estoque      Int
  categoriaid  BigInt
  categoria    categoria      @relation(fields: [categoriaid], references: [categoriaid])
  imagem       String?        @db.Text
  createdAt    DateTime       @default(now())
  ordemProduto ordemProduto[]
}

model ordem {
  ordemid    BigInt         @id @default(autoincrement())
  usuarioid  Int
  usuario    usuario        @relation(fields: [usuarioid], references: [usuarioid])
  enderecoid BigInt
  endereco   endereco       @relation(fields: [enderecoid], references: [enderecoid])
  totalPreco Decimal        @db.Decimal(10, 2)
  desconto   Decimal        @db.Decimal(10, 2)
  frete      Decimal        @db.Decimal(10, 2)
  precoFinal Decimal        @db.Decimal(10, 2)
  status     String
  createdAt  DateTime       @default(now())
  updateAt   DateTime       @default(now()) @updatedAt
  produtos   ordemProduto[] // 1:N
  pagamento  pagamento? // 1:1
}

model ordemProduto {
  id            BigInt   @id @default(autoincrement())
  ordemid       BigInt
  ordem         ordem    @relation(fields: [ordemid], references: [ordemid])
  produtoid     BigInt
  produto       produto  @relation(fields: [produtoid], references: [produtoid])
  quantidade    Int
  precoUnitario Decimal  @db.Decimal(10, 2)
  subtotal      Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
}

model pagamento {
  pagamentoid    BigInt   @id @default(autoincrement())
  ordemid        BigInt   @unique
  ordem          ordem    @relation(fields: [ordemid], references: [ordemid])
  valor          Decimal  @db.Decimal(10, 2)
  status         Int
  data           DateTime @default(now())
  usuarioid      Int
  usuario        usuario  @relation(fields: [usuarioid], references: [usuarioid])
  transacao      String
  formaPagamento String
  cartao         String?
  parcelas       Int
  createdAt      DateTime @default(now())
}

model historia {
  historiaid  BigInt       @id @default(autoincrement())
  titulo      String
  conteudo    String       @db.Text
  imagem      String?      @db.Text
  usuarioid   Int
  usuario     usuario      @relation(fields: [usuarioid], references: [usuarioid])
  categoria   String?
  esporte     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  comentarios comentario[]
}

model comentario {
  comentarioid BigInt   @id @default(autoincrement()) @map("comentarioid")
  conteudo     String   @db.Text
  usuarioid    Int      @map("usuarioid")
  usuario      usuario  @relation(fields: [usuarioid], references: [usuarioid])
  historiaid   BigInt   @map("historiaid")
  historia     historia @relation(fields: [historiaid], references: [historiaid])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model membro {
  membroid      BigInt    @id @default(autoincrement())
  usuarioid     Int       @unique
  nome          String
  usuario       usuario   @relation(fields: [usuarioid], references: [usuarioid])
  dataInicio    DateTime  @default(now())
  dataExpiracao DateTime?
  ativo         Boolean   @default(true)
  beneficios    String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model promocao {
  promocaoid BigInt   @id @default(autoincrement())
  codigo     String   @unique
  descricao  String
  desconto   Decimal  @db.Decimal(10, 2)
  ativo      Boolean  @default(true)
  validade   DateTime
  createdAt  DateTime @default(now())
}
